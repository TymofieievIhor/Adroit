import { ServiceBase } from '../../common/helpers/service.base';
import { Client } from './client.entity';
import { EntityManager, Repository } from 'typeorm';
import { CreateClientDto } from './dto/create-client.dto';
import { LocationService } from '../location/location.service';
import { BankAccountService } from '../bank-account/bank-account.service';
import { AccountService } from '../account/account.service';
import { ClientTypeService } from '../client-type/client-type.service';
import { BasicPaginationDto } from '../../common/helpers/basic-pagination.dto';
import { IResponseWithPagination } from '../../common/helpers/interfaces/reponseWithPagination.interface';
import { ContactService } from '../contact/contact.service';
import { Contact } from '../contact/contact.entity';
import { FileService } from '../file/file.service';
import { UpdateClientDto } from './dto/update-client.dto';
import { FileUtils } from '../file/fileUtils';
import { SetArchivedStatusDto } from './dto/set-archived-status.dto';
import { UtilsService } from '../../common/utils/utils.service';
import { ClientAdminService } from '../client-admin/client-admin.service';
import { ServiceContractService } from '../service-contract/service-contract.service';
import { ServiceContract } from '../service-contract/entities/service-contract.entity';
export declare class ClientService extends ServiceBase<Client> {
    protected readonly repository: Repository<Client>;
    private locationService;
    private bankAccountService;
    private accountService;
    private clientTypeService;
    private contactService;
    private fileService;
    private fileUtils;
    private utilsService;
    private clientAdminService;
    private serviceContractService;
    constructor(repository: Repository<Client>, locationService: LocationService, bankAccountService: BankAccountService, accountService: AccountService, clientTypeService: ClientTypeService, contactService: ContactService, fileService: FileService, fileUtils: FileUtils, utilsService: UtilsService<Client>, clientAdminService: ClientAdminService, serviceContractService: ServiceContractService);
    create(data: CreateClientDto, manager?: EntityManager): Promise<Client>;
    find(body?: any, pagination?: BasicPaginationDto): Promise<IResponseWithPagination<Client>>;
    findById(id: number): Promise<Client>;
    findContacts(id: number, pagination?: BasicPaginationDto): Promise<IResponseWithPagination<Contact>>;
    updateById(id: number, data: UpdateClientDto, manager?: EntityManager): Promise<Client>;
    setArchivedStatusById(id: number, body: SetArchivedStatusDto): Promise<void>;
    getServiceContractsById(id: number, pagination?: BasicPaginationDto): Promise<IResponseWithPagination<ServiceContract>>;
    deleteById(id: number): Promise<void>;
    private addContractsAndPricing;
    private findWithRelations;
}
